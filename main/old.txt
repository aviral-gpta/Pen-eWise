// #include <stdio.h>
// #include "sdkconfig.h"
// #include <string.h>
// #include <stdint.h>
// #include <unistd.h>
// // #include <sys/socket.h>
// #include <errno.h>
// // #include <netdb.h>            // struct addrinfo
// // #include <arpa/inet.h>
// // #include "esp_netif.h"
// #include "esp_log.h"
// #include <freertos/FreeRTOS.h>
// #include <freertos/task.h>
// #include "driver/gpio.h"
// #include "driver/i2c.h"
#include "MPU.hpp"
#include "I2Cbus.hpp"
// static const char *TAG = "penewise";

// #define I2C_MASTER_SCL_IO           CONFIG_I2C_MASTER_SCL      /*!< GPIO number used for I2C master clock */
// #define I2C_MASTER_SDA_IO           CONFIG_I2C_MASTER_SDA      /*!< GPIO number used for I2C master data  */
// #define I2C_MASTER_NUM              0                          /*!< I2C master i2c port number, the number of i2c peripheral interfaces available will depend on the chip */
// #define I2C_MASTER_FREQ_HZ          400000                     /*!< I2C master clock frequency */
// #define I2C_MASTER_TX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
// #define I2C_MASTER_RX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
// #define I2C_MASTER_TIMEOUT_MS       1000

// #define MPU9250_SENSOR_ADDR                 0x68        /*!< Slave address of the MPU9250 sensor */
// #define MPU9250_WHO_AM_I_REG_ADDR           0x75        /*!< Register addresses of the "who am I" register */

// #define MPU9250_PWR_MGMT_1_REG_ADDR         0x6B        /*!< Register addresses of the power managment register */
// #define MPU9250_RESET_BIT                   7


// static esp_err_t i2c_master_init(void){
//     i2c_config_t conf = {
//         .mode = I2C_MODE_MASTER,
//         .sda_io_num = 10,
//         .scl_io_num = 8,
//         .master.clk_speed = 100000
//     };
//     return i2c_param_config(I2C_NUM_0, &conf);
//     // return i2c_driver_install(I2C_NUM_0, conf.mode, 0, 0, 0);
// }

// void app_main(void)
// {
    // while(1) ESP_LOGI(TAG, "hello");
    //     gpio_iomux_out(GPIO_NUM_6, 1,0);
    // gpio_set_direction(GPIO_NUM_6, GPIO_MODE_OUTPUT);
    
    //     gpio_iomux_out(GPIO_NUM_4, 1,0);
    // gpio_set_direction(GPIO_NUM_4, GPIO_MODE_OUTPUT);
    // // while(1){
    //     //  gpio_set_level(GPIO_NUM_4, 1);
    //     gpio_set_level(GPIO_NUM_6, 0);
    //     gpio_set_level(GPIO_NUM_4, 0);

        // ESP_LOGI(TAG, "level: %d", level);
    // }
    // ESP_LOGI(TAG, "I2C initialized successfully");
    // i2c_driver_install(I2C_NUM_0, I2C_MODE_MASTER, 0, 0, 0);
    // ESP_ERROR_CHECK(i2c_master_init());
    // for(int i=0; i<128; i++){
    //     i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    //         i2c_master_start(cmd);
    //         i2c_master_write_byte(cmd, (i << 1) | I2C_MASTER_WRITE, 1);
    //         i2c_master_stop(cmd);
    //         esp_err_t ret = i2c_master_cmd_begin(I2C_NUM_0, cmd, 50 / portTICK_PERIOD_MS);
    //         i2c_cmd_link_delete(cmd);
    //         if (ret == ESP_OK) {
    //             ESP_LOGI(TAG, "Valid address: %02x ", i);
    //             printf("%02x ", i);
    //         }
    // }
    // i2c_driver_delete(I2C_NUM_0);
// }
// 

#include <iostream>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include "main.h"

void HelloCMake::run(int i)
{
    std::cout << "Hello World from C++ "<< i << '\n';
    vTaskDelay(pdMS_TO_TICKS(1000));
}

extern "C" void app_main(void)
{
    HelloCMake App;
    int i = 0;

    while (true)
    {
        App.run(i);
        i++;
    }    
}